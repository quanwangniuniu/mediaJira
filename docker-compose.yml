services:
# Database Service - Only start in CI environment
  db:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mediajira_db}
      POSTGRES_USER: ${POSTGRES_USER:-mediajira_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-jared520}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - ci

  # Redis Service - For future Celery
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - ci

  # ClamAV Service - For virus scanning
  clamav:
    image: clamav/clamav:latest
    container_name: clamav
    restart: always
    ports:
      - "3310:3310"
    healthcheck:
      test: ["CMD", "clamdscan", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - ci

# Backend Service - always start
  backend:
    build: ./backend
    container_name: backend
    restart: always
    expose:
      - "8000"
    env_file:
      - .env
    environment:
      # Select database host based on environment variable
      - DB_HOST=${DB_HOST:-db}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      # Conditional dependencies - Only depend on db and redis in CI environment or full environment
      db:
        condition: service_healthy
        required: false
      redis:
        condition: service_healthy
        required: false
      clamav:
        condition: service_healthy
        required: false

# Frontend Service  - always start
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: always
    expose:
      - "3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend

# Nginx Service - Only start in dev environment or full environment
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend

volumes:
  pgdata: 