version: "3.8"

services:
  # Redis Service for WebSocket functionality
  redis:
    image: redis:7-alpine
    container_name: redis-dev
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ClamAV Service for virus scanning
  clamav:
    image: mkodockx/docker-clamav:alpine
    container_name: clamav-dev
    restart: always
    ports:
      - "3310:3310"
    volumes:
      - clamav_data:/var/lib/clamav
    healthcheck:
      test: ["CMD", "clamdscan", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend (Development)
  backend:
    build: ./backend
    container_name: backend-dev
    restart: always
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - DB_HOST=host.docker.internal
      - DEBUG=True
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      redis:
        condition: service_healthy
      clamav:
        condition: service_healthy
    volumes:
      - ./backend:/app

  # Next.js Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend-dev
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend

  # Nginx Reverse Proxy
  nginx:
    image: nginx:latest
    container_name: nginx-dev
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend

  # Celery Worker for background tasks
  celery-worker:
    build: ./backend
    container_name: celery-worker-dev
    restart: always
    env_file:
      - .env
    environment:
      - DB_HOST=host.docker.internal
      - DEBUG=True
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      redis:
        condition: service_healthy
      clamav:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: celery -A backend worker --loglevel=info

volumes:
  clamav_data: 