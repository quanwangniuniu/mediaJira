openapi: 3.0.0
info:
  title: Media Jira Auth API
  version: 1.0.0
  description: Authentication API for Media Jira application
servers:
  - url: http://localhost:8000
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: "user@example.com"
        username:
          type: string
          example: "user_a1b2c3d4"
        is_verified:
          type: boolean
          example: true
        organization:
          $ref: '#/components/schemas/Organization'
        roles:
          type: array
          items:
            type: string
          example: ["Media Buyer"]
    Organization:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Agency X"
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Error message"
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Success message"
paths:
  /auth/register/:
    post:
      summary: Register a new user and trigger email verification
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  minLength: 8
                  example: "securepass123"
                username:
                  type: string
                  example: "username"
                organization_id:
                  type: integer
                  nullable: true
                  example: 1
              required:
                - email
                - password
                - username
      responses:
        '201':
          description: Registration successful - verification email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                example:
                  message: "User registered. Please verify email."
        '400':
          description: Invalid input (e.g. missing fields, password too short, email already registered)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                examples:
                  missing_fields:
                    value:
                      error: "Missing fields"
                  password_short:
                    value:
                      error: "Password too short"
                  email_exists:
                    value:
                      error: "Email already registered"
                  org_not_found:
                    value:
                      error: "Organization not found"
  /auth/verify/:
    get:
      summary: Verify user email with token
      tags:
        - Authentication
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
          description: Verification token sent via email
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Email verification successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                examples:
                  verified:
                    value:
                      message: "Email successfully verified."
                  already_verified:
                    value:
                      message: "Email already verified."
        '400':
          description: Missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                examples:
                  missing_token:
                    value:
                      error: "Missing token"
                  invalid_token:
                    value:
                      error: "Invalid token"
  /auth/login/:
    post:
      summary: User login
      description: Authenticates a user and returns a JWT token and user profile.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "securepass123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  token:
                    type: string
                    description: JWT access token
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                  refresh:
                    type: string
                    description: JWT refresh token
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                  user:
                    $ref: '#/components/schemas/UserProfile'
        '400':
          description: Missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                example:
                  error: "Email and password required."
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                example:
                  error: "Invalid credentials"
        '403':
          description: User not verified 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                example:
                  error: "User not verified"
  /auth/sso/redirect/:
    get:
      summary: Simulate SSO redirect to provider
      description: Returns a mock redirect URL for SSO testing
      tags:
        - SSO
      responses:
        '200':
          description: Mock SSO redirect URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  redirect_url:
                    type: string
                    example: "https://mock-sso-provider.com/auth?state=mockstate"
        '405':
          description: Method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/sso/callback/:
    get:
      summary: Handle SSO callback and create/authenticate user
      description: Simulates SSO callback by creating or authenticating a user based on email domain
      tags:
        - SSO
      parameters:
        - in: query
          name: email
          required: false
          schema:
            type: string
            format: email
          description: Email address for the user (defaults to buyer@agencyX.com if not provided)
          example: "user@agencyX.com"
      responses:
        '200':
          description: SSO login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "SSO login successful"
                  token:
                    type: string
                    description: JWT access token
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                  refresh:
                    type: string
                    description: JWT refresh token
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                  user:
                    $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                examples:
                  email_required:
                    value:
                      error: "Email parameter is required."
                  invalid_email:
                    value:
                      error: "Invalid email format."
                  no_organization:
                    value:
                      error: "No organization found for this email domain."
        '405':
          description: Method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/me/:
    get:
      summary: Get current logged-in user's profile
      description: Returns the authenticated user's profile, including roles, organization, and verification status.
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized (no or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                example:
                  error: "Authentication credentials were not provided."